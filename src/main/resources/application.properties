# application.properties - PLANIAR
spring.application.name=planiar

# ---------- DataSource: prefer ENV vars for production (Supabase/Railway) ----------
# If SPRING_DATASOURCE_URL is provided (e.g. jdbc:postgresql://host:5432/db?sslmode=require),
# Spring Boot will use it. Otherwise fallback to H2 in-memory for local development.
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:h2:mem:planiar;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:sa}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:}
# Driver class is auto-detected; set explicitly if needed
spring.datasource.driver-class-name=${SPRING_DATASOURCE_DRIVER:org.h2.Driver}

# ---------- JPA / Hibernate ----------
# Use 'update' in production to create missing tables (careful: prefer migrations for real prod).
# Default is 'none' if you want to manage schema via migrations. For dev fallback we keep create-drop for H2 only.
# We'll set ddl-auto based on whether a Postgres JDBC URL is provided:
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:true}

# Hibernate dialect: if connecting to Postgres, prefer Postgres dialect.
spring.jpa.properties.hibernate.dialect=${SPRING_HIBERNATE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}

# -------------------------------------------------
# NOTES / sensible defaults:
# - In Railway set:
#   SPRING_DATASOURCE_URL = jdbc:postgresql://<host>:5432/<db>?sslmode=require
#   SPRING_DATASOURCE_USERNAME = <user>
#   SPRING_DATASOURCE_PASSWORD = <password>
#   SPRING_JPA_HIBERNATE_DDL_AUTO = update
# - If you DON'T set SPRING_DATASOURCE_URL locally, app will use H2 in-memory.
# - Avoid leaving create-drop in production: it drops schema at shutdown.
# -------------------------------------------------